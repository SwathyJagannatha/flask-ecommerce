import React, {useState} from "react";
import axios from "axios";
import NavigationBar from "./NavigationBar";
import { Link } from "react-router-dom";

// import 'bootstrap/dist/css/bootstrap.min.css';
import { Form, Button, Alert, Container } from "react-bootstrap";

function CustomerForm(){
  const [customerData, setCustomerData] = useState({
    name: '',
    phone: '',
    email: ''
  })
  const [ isLoading, setIsLoading ] = useState(true);
  const [error, setError] = useState('');
  const [errors, setErrors] = useState({
    name: "",
    email: "",
    phone: ""
  })

  // const customer = {name: "", phone: "", email: ""}
  // customerData = customer 

  const formStyles = {
    display: 'flex', 
    flexDirection: 'column', 
    alignItems: 'start',
    justifyContent: 'space-between',
    height: '250px'
  }

  //class written function
  // Write a function to handle form submission 
  // const handleSubmit = async (event) => {
  //   event.preventDefault(); 

  //   const response = await axios.post(`https://httpbin.org/post`, {
  //     body: customerData
  //   })

  //   console.log(response.data)
  // }

 // trying now
  const handleSubmit = async (event) => {
    event.preventDefault();
    setIsLoading(true);
    
    setError('');
  
    try {
      const response = await axios.post(`http://127.0.0.1:5000/customers`, customerData);
      console.log(response.data);
      setIsLoading(false);
      // Clear the form after successful submission
      setCustomerData({ name: '', phone: '', email: '' });
      <button onClick={() => navigate(`/customers/`)}>View Customers</button>
    } catch (err) {
      setIsLoading(false);
      setError('Error submitting customer data: ' + err.message);
    }
  };

  // Write a function to handle change of form 
  // const handleChange = (event) => {
  //   // event = {
  //   //   name: "name", 
  //   //   value: "Katelyn Mehner"
  //   // }

  //   event.preventDefault();

  //   let {name, value} = event.target; // Grabbing the name and value attribute and setting these variable names using the spread operator 
  //   // let name = event.target.name
  //   // let value = event.target.value 

  //   const newData = {...customerData}; 

  //   for (let [key, val] of Object.entries(newData)){
  //     console.log(`The key is ${key}`);
  //     console.log(`The value is ${val}`)

  //     if (key==name){
  //       newData[key] = value 

  //       console.log(`Key ${key} == name ${name}`)
  //     }
  //   } 
  //   console.log(newData); 
  //   setCustomerData(newData); 

  // }

  const handleChange = (event) => {
    // Phone number input event
    // event = { name: "phone", value: "(805) 333-4343" }
    event.preventDefault();
  
    let { name, value } = event.target;
    // let name = "phone"
    // let value = "(805) 333-4343"
  
    const newData = { ...customerData };
  
    if (customerData.hasOwnProperty(name)) {
      newData[name] = value;
    }
  
    setCustomerData(newData);
    
  };

  return (
    // <>
      // <NavigationBar/>
      <Container>
        { isLoading && <Alert variant="info">Submitting customer data</Alert>}

        { error && <Alert variant="danger">Error submitting customer data: {error}</Alert>}

        <Form onSubmit={handleSubmit}>
          <Form.Group controlId="formGroupName">
            <Form.Label>Name</Form.Label>
            <Form.Control type="text" name="name" value={customerData.name} onChange={handleChange}></Form.Control>

           {/* Need to update the errors to be specific to our name section */}
            {errors && <div style={{ color: 'red' }}>{errors.email}</div>}
          </Form.Group>

          <Form.Group controlId="formGroupPhone">
            <Form.Label>Phone</Form.Label>
            <Form.Control type="text" name="phone" value={customerData.phone} onChange={handleChange}></Form.Control>

            {/* Need to update the errors to be specific to our phone section */}
            {errors && <div style={{color: 'red'}}>{errors.email}</div>}
          </Form.Group>

          <Form.Group controlId="formGroupEmail">
            <Form.Label>Email</Form.Label>
            <Form.Control type="text" name="email" value={customerData.email} onChange={handleChange}></Form.Control>

            {/* Need to update the errors to be specific to our email section */}
            {errors && <div style={{color: 'red'}}>{errors.email}</div>}
          </Form.Group>

          <Button variant="primary" type="submit">Submit</Button>

        </Form>

      </Container>
    // </>
  )
}

export default CustomerForm; 